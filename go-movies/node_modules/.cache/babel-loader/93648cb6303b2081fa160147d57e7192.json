{"ast":null,"code":"var _jsxFileName = \"/home/perigrine/react_tuts/movies/go-movies/src/Components/form-components/Input.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = ({\n  title,\n  name,\n  type,\n  className,\n  placeholder,\n  errorMsg,\n  errorDiv,\n  ...otherProps\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      className: \"form-label\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...otherProps,\n      // destructuring in Javascript, get all props provided without having to explicitly type them out\n      // destructuring props before explicitly defining props like below will ensure that you override the props\n      // even when passed to the component\n      type: type,\n      className: `form-control ${className}`,\n      id: name,\n      name: name // value={props.value}\n      // onChange={props.handleChange}\n      ,\n      placeholder: placeholder // {..props} doing it here will give you flexibility of overriding the above props(default)\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: errorDiv,\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/perigrine/react_tuts/movies/go-movies/src/Components/form-components/Input.js"],"names":["Input","title","name","type","className","placeholder","errorMsg","errorDiv","otherProps"],"mappings":";;;AAAA,MAAMA,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,IAAf;AAAqBC,EAAAA,SAArB;AAAgCC,EAAAA,WAAhC;AAA6CC,EAAAA,QAA7C;AAAuDC,EAAAA,QAAvD;AAAiE,KAAGC;AAApE,CAAD,KAAqF;AAC/F,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAO,MAAA,OAAO,EAAEN,IAAhB;AAAsB,MAAA,SAAS,EAAC,YAAhC;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,sBACQO,UADR;AACoB;AAChB;AACA;AACA,MAAA,IAAI,EAAEL,IAJV;AAKI,MAAA,SAAS,EAAG,gBAAeC,SAAU,EALzC;AAMI,MAAA,EAAE,EAAEF,IANR;AAOI,MAAA,IAAI,EAAEA,IAPV,CAQI;AACA;AATJ;AAUI,MAAA,WAAW,EAAEG,WAVjB,CAWI;;AAXJ;AAAA;AAAA;AAAA;AAAA,YAJJ,eAiBI;AAAK,MAAA,SAAS,EAAEE,QAAhB;AAAA,gBAA2BD;AAA3B;AAAA;AAAA;AAAA;AAAA,YAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAtBD;;KAAMN,K;AAwBN,eAAeA,KAAf","sourcesContent":["const Input = ({ title, name, type, className, placeholder, errorMsg, errorDiv, ...otherProps}) => {\n    return (\n        <div className=\"mb-3\">\n            <label htmlFor={name} className=\"form-label\">\n                {title}\n            </label>\n            <input\n                {...otherProps} // destructuring in Javascript, get all props provided without having to explicitly type them out\n                // destructuring props before explicitly defining props like below will ensure that you override the props\n                // even when passed to the component\n                type={type}\n                className={`form-control ${className}`}\n                id={name}\n                name={name}\n                // value={props.value}\n                // onChange={props.handleChange}\n                placeholder={placeholder}\n                // {..props} doing it here will give you flexibility of overriding the above props(default)\n            />\n            <div className={errorDiv}>{errorMsg}</div>\n        </div>\n    );\n};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}