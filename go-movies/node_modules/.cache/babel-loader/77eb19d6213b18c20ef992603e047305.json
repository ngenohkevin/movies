{"ast":null,"code":"var _jsxFileName = \"/home/perigrine/react_tuts/go-movies/src/Components/Genres.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Genres extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      genres: [],\n      isLoaded: false,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8000/v1/genres\").then(response => {\n      if (response.status !== \"200\") {\n        let err = Error;\n        err.message = \"Invalid response code: \" + response.status;\n        this.setState({\n          error: err\n        });\n      }\n\n      return response.json();\n    }).then(json => {\n      this.setState({\n        movies: json.genres,\n        isLoaded: true\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    });\n  }\n\n  render() {\n    const {\n      genres,\n      isLoaded,\n      error\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: genres.map(m => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/genre/${m.id}`,\n            children: m.genre_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this)\n        }, m.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/perigrine/react_tuts/go-movies/src/Components/Genres.js"],"names":["React","Component","Fragment","Link","Genres","state","genres","isLoaded","error","componentDidMount","fetch","then","response","status","err","Error","message","setState","json","movies","render","map","m","id","genre_name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,eAAe,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAAA;AAAA;AAAA,SAE1CI,KAF0C,GAElC;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,QAAQ,EAAE,KAFN;AAGJC,MAAAA,KAAK,EAAE;AAHH,KAFkC;AAAA;;AAQ1CC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,iCAAD,CAAL,CACKC,IADL,CACWC,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,KAAxB,EAA+B;AAC3B,YAAIC,GAAG,GAAGC,KAAV;AACAD,QAAAA,GAAG,CAACE,OAAJ,GAAc,4BAA4BJ,QAAQ,CAACC,MAAnD;AACA,aAAKI,QAAL,CAAc;AAACT,UAAAA,KAAK,EAAEM;AAAR,SAAd;AACH;;AACD,aAAOF,QAAQ,CAACM,IAAT,EAAP;AACH,KARL,EASKP,IATL,CASWO,IAAD,IAAU;AACZ,WAAKD,QAAL,CAAc;AACNE,QAAAA,MAAM,EAAED,IAAI,CAACZ,MADP;AAENC,QAAAA,QAAQ,EAAE;AAFJ,OAAd,EAIKC,KAAD,IAAW;AACP,aAAKS,QAAL,CAAc;AACVV,UAAAA,QAAQ,EAAE,IADA;AAEVC,UAAAA;AAFU,SAAd;AAIH,OATL;AAWH,KArBL;AAsBH;;AAEDY,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEd,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,QAA8B,KAAKH,KAAzC;AAEA,wBACI,QAAC,QAAD;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAA,kBACKC,MAAM,CAACe,GAAP,CAAYC,CAAD,iBACR;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAG,UAASA,CAAC,CAACC,EAAG,EAAzB;AAAA,sBAA6BD,CAAC,CAACE;AAA/B;AAAA;AAAA;AAAA;AAAA;AADJ,WAASF,CAAC,CAACC,EAAX;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AAjDyC","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Genres extends Component {\r\n\r\n    state = {\r\n        genres: [],\r\n        isLoaded: false,\r\n        error: null,\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://localhost:8000/v1/genres\")\r\n            .then((response) => {\r\n                if (response.status !== \"200\") {\r\n                    let err = Error;\r\n                    err.message = \"Invalid response code: \" + response.status;\r\n                    this.setState({error: err});\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((json) => {\r\n                this.setState({\r\n                        movies: json.genres,\r\n                        isLoaded: true,\r\n                    },\r\n                    (error) => {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            error\r\n                        });\r\n                    }\r\n                );\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { genres, isLoaded, error } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <h2>Genres</h2>\r\n\r\n                <ul>\r\n                    {genres.map((m) => (\r\n                        <li key={m.id}>\r\n                            <Link to={`/genre/${m.id}`}>{m.genre_name}</Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </Fragment>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}