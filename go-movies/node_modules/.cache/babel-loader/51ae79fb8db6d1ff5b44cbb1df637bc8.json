{"ast":null,"code":"var _jsxFileName = \"/home/perigrine/react_tuts/go-movies/src/Components/Movies.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      isLoaded: false,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8000/v1/movies\") // .then((response) => response.json())\n    .then(response => {\n      console.log(\"status code is\", response.status);\n\n      if (response.status !== \"200\") {\n        let err = Error;\n        err.message = \"Invalid response code: \" + response.status;\n        this.setState({\n          error: err\n        });\n      }\n\n      return response.json();\n    }).then(json => {\n      this.setState({\n        movies: json.movies,\n        isLoaded: true\n      }, error => {\n        this.setState({\n          isLoaded: true\n        });\n      });\n    });\n  }\n\n  render() {\n    const {\n      movies,\n      isLoaded,\n      error\n    } = this.state;\n\n    if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Choose a Movie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: movies.map(m => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/movies/${m.id}`,\n              children: m.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 33\n            }, this)\n          }, m.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/perigrine/react_tuts/go-movies/src/Components/Movies.js"],"names":["React","Component","Fragment","Link","Movies","state","movies","isLoaded","error","componentDidMount","fetch","then","response","console","log","status","err","Error","message","setState","json","render","map","m","id","title"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,eAAe,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAAA;AAAA;AAAA,SAE1CI,KAF0C,GAElC;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,QAAQ,EAAE,KAFN;AAGJC,MAAAA,KAAK,EAAE;AAHH,KAFkC;AAAA;;AAQ1CC,EAAAA,iBAAiB,GAAG;AACjBC,IAAAA,KAAK,CAAC,iCAAD,CAAL,CACA;AADA,KAEKC,IAFL,CAEWC,QAAD,IAAc;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,QAAQ,CAACG,MAAvC;;AACA,UAAIH,QAAQ,CAACG,MAAT,KAAoB,KAAxB,EAA8B;AAC1B,YAAIC,GAAG,GAAGC,KAAV;AACAD,QAAAA,GAAG,CAACE,OAAJ,GAAc,4BAA4BN,QAAQ,CAACG,MAAnD;AACA,aAAKI,QAAL,CAAc;AAACX,UAAAA,KAAK,EAAEQ;AAAR,SAAd;AACH;;AACD,aAAOJ,QAAQ,CAACQ,IAAT,EAAP;AACH,KAVL,EAWKT,IAXL,CAWWS,IAAD,IAAU;AACZ,WAAKD,QAAL,CAAc;AACXb,QAAAA,MAAM,EAAEc,IAAI,CAACd,MADF;AAEVC,QAAAA,QAAQ,EAAG;AAFD,OAAd,EAIKC,KAAD,IAAW;AACX,aAAKW,QAAL,CAAc;AACVZ,UAAAA,QAAQ,EAAE;AADA,SAAd;AAGC,OARL;AAUH,KAtBL;AAuBF;;AAEDc,EAAAA,MAAM,GAAG;AACL,UAAM;AAACf,MAAAA,MAAD;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAA6B,KAAKH,KAAxC;;AACA,QAAI,CAACE,QAAL,EAAe;AACX,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFD,MAEO;AACH,0BACI,QAAC,QAAD;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBACKD,MAAM,CAACgB,GAAP,CAAYC,CAAD,iBACR;AAAA,mCACI,QAAC,IAAD;AAAM,cAAA,EAAE,EAAG,WAAUA,CAAC,CAACC,EAAG,EAA1B;AAAA,wBAA8BD,CAAC,CAACE;AAAhC;AAAA;AAAA;AAAA;AAAA;AADJ,aAASF,CAAC,CAACC,EAAX;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAYH;AACJ;;AApDyC","sourcesContent":["import React, {Component, Fragment} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Movies extends Component {\r\n\r\n    state = {\r\n        movies: [],\r\n        isLoaded: false,\r\n        error: null,\r\n    };\r\n\r\n    componentDidMount() {\r\n       fetch(\"http://localhost:8000/v1/movies\")\r\n       // .then((response) => response.json())\r\n           .then((response) => {\r\n               console.log(\"status code is\", response.status);\r\n               if (response.status !== \"200\"){\r\n                   let err = Error;\r\n                   err.message = \"Invalid response code: \" + response.status;\r\n                   this.setState({error: err})\r\n               }\r\n               return response.json();\r\n           })\r\n           .then((json) => {\r\n               this.setState({\r\n                  movies: json.movies,\r\n                   isLoaded:  true,\r\n               },\r\n                   (error) => {\r\n                   this.setState({\r\n                       isLoaded: true,\r\n                   });\r\n                   }\r\n                   );\r\n           });\r\n    }\r\n\r\n    render() {\r\n        const {movies, isLoaded, error } = this.state;\r\n        if (!isLoaded) {\r\n            return <p>Loading...</p>\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <h2>Choose a Movie</h2>\r\n                    <ul>\r\n                        {movies.map((m) => (\r\n                            <li key={m.id}>\r\n                                <Link to={`/movies/${m.id}`}>{m.title}</Link>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}